version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '${PORT}:3000'
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}?schema=public
      - KAFKA_HOST=kafka
      - KAFKA_BROKER=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env

  log-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start:log-worker:prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}?schema=public
      - KAFKA_HOST=kafka
      - KAFKA_BROKER=kafka:9092
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      replicas: 4
    env_file:
      - .env

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - '${KAFKA_PORT}:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 4
    healthcheck:
      test:
        [
          'CMD',
          'kafka-topics',
          '--bootstrap-server',
          'localhost:9092',
          '--list',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - '${DATABASE_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-postgis.sql:/docker-entrypoint-initdb.d/init-postgis.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USER}']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
